@model GymStandingViewModel
@{
    ViewData["Title"] = "Standings";
    var state = Contest.GetState();
    var stat = new ProblemStatisticsModel[Model.Problems.Count];
    for (int i = 0; i < Model.Problems.Count; i++) stat[i] = new ProblemStatisticsModel();
    bool firstSortOrder = true;
    int totalRows = 0, start = 0, end = int.MaxValue;
    const int PagingSize = CcsDefaults.DefaultScoreboardPagingSize;
    if (Contest.ShouldScoreboardPaging()) { start = PagingSize * (Model.Page - 1); end = start + PagingSize; }
}

@functions {
    void ShowRow(TeamModel row, bool firstSortOrder)
    {
        WriteLiteral("<tr data-team-id=\"");
        Write(row.TeamId);
        WriteLiteral("\"><td scope=\"row\">");
        Write(firstSortOrder ? row.Rank?.ToString() + (row.Eligible ? "" : "*") : "*");
        WriteLiteral("</td><td class=\"text-left\"><a class=\"font-weight-semibold\">");
        Write(row.TeamName);
        WriteLiteral("</a>");
        if (Model.TeamMembers.Contains(row.TeamId))
        {
            bool fst = true;
            foreach (var userName in Model.TeamMembers[row.TeamId])
            {
                WriteLiteral(fst ? " : <a href=\"" : ", <a href=\"");
                Write(Url.RouteUrl("AccountProfile", new { username = userName }));
                WriteLiteral("\">");
                Write(userName);
                WriteLiteral("</a>");
                fst = false;
            }
        }
        WriteLiteral("</td><td>");
        Write(row.Points);
        WriteLiteral("</td>");
        foreach (var penalty in row.Problems)
        {
            if (penalty == null || penalty.JudgedCount == 0)
            {
                WriteLiteral("<td class=\"text-center score-cell\"></td>");
                continue;
            }
            WriteLiteral("<td class=\"text-center score-cell\"><span class=\"font-weight-bold");
            WriteLiteral(Contest.RankingStrategy == CcsDefaults.RuleXCPC || Contest.RankingStrategy == CcsDefaults.RuleCodeforces ? penalty.Score.HasValue ? " text-success" : penalty.PendingCount > 0 ? " text-primary-dark" : " text-danger" : "");
            WriteLiteral("\">");
            WriteLiteral(Contest.RankingStrategy switch
            {
                CcsDefaults.RuleXCPC => penalty.Score.HasValue ? penalty.JudgedCount == 1 ? "+" : $"+{penalty.JudgedCount - 1}" : $"-{penalty.JudgedCount}",
                CcsDefaults.RuleIOI => penalty.Score ?? 0,
                CcsDefaults.RuleCodeforces => penalty.Score.HasValue ? $"{penalty.Score}" : $"-{penalty.JudgedCount}",
                _ => "",
            });
            WriteLiteral(penalty.PendingCount > 0 ? "?" : "");
            WriteLiteral("</span></td>");
        }
        WriteLiteral("</tr>\r\n");
    }
}

<link rel="stylesheet" href="~/lib/site-ccs/gym.css?v=@Contest.CcsVersion" />
<div class="container container-gym pl-0 pr-0" id="eoj-container">
<partial name="_StatusMessage" model="@TempData["StatusMessage"]" />
@{ TempData.Remove("StatusMessage"); }

<div class="row">
<div class="col-12 main">
<h2 class="mt-3 mb-2 text-md-center">@Contest.Name</h2>
<span class="d-block text-md-center mb-3 text-muted" style="font-size:1.2em">
    @state.ToString(Contest.StartTime, Contest.EndTime)
</span>

<table class="table table-gym text-center" style="table-layout:fixed">
    <thead>
        <tr>
            <th class="head-box" title="Rank">#</th>
            <th class="text-left">Who</th>
            <th class="head-box" title="Score">=</th>
            @foreach (var prob in Model.Problems)
            {
            <th class="head-box-md prob-cell"><a asp-action="ProblemView" asp-route-prob="@prob.ShortName">@prob.ShortName</a></th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var sortOrder in Model)
        {
            for (int i = Math.Max(0, start); i < end && i < sortOrder.Count; i++)
            {
                ShowRow(sortOrder[i], firstSortOrder);
            }

            totalRows += sortOrder.Count;
            start -= sortOrder.Count;
            end -= sortOrder.Count;
            firstSortOrder = false;
            for (int i = 0; i < Model.Problems.Count; i++)
            {
                stat[i].Accepted += sortOrder.Statistics[i].Accepted;
                stat[i].FirstSolve ??= sortOrder.Statistics[i].FirstSolve;
                stat[i].Pending += sortOrder.Statistics[i].Pending;
                stat[i].Rejected += sortOrder.Statistics[i].Rejected;
            }
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-left"><span class="text-success">Accepted</span><br>Tried</td>
            @foreach (var item in stat)
            {
                <td style="width: 6.25%"><span class="text-success">@item.Accepted</span><br>@(item.Accepted + item.Rejected)</td>
            }
        </tr>
    </tfoot>
</table>
</div>
<div class="col-md-6">
    @if (Contest.ShouldScoreboardPaging())
    {
        int maximumPage = (totalRows - 1) / PagingSize + 1;
        <ul class="pagination pagination-sm">
            <li class="page-item @(Model.Page == 1 ? "disabled" : "")"><a class="page-link" asp-route-page="1">&laquo;</a></li>
            <li class="page-item @(Model.Page == 1 ? "disabled" : "")"><a class="page-link" asp-route-page="@(Model.Page - 1)">&lsaquo;</a></li>
            @for (int i = Math.Max(1, Model.Page - 3); i <= maximumPage && i <= Model.Page + 3; i++)
            {
                <li class="page-item @(i == Model.Page ? "active" : "")"><a class="page-link" asp-route-page="@i">@i</a></li>
            }
            <li class="page-item @(Model.Page == maximumPage ? "disabled" : "")"><a class="page-link" asp-route-page="@(Model.Page + 1)">&rsaquo;</a></li>
            <li class="page-item @(Model.Page == maximumPage ? "disabled" : "")"><a class="page-link" asp-route-page="@maximumPage">&raquo;</a></li>
        </ul>
    }
</div>
<div class="col-md-6 text-md-right">
<small class="text-muted">
    Last Update: @Html.CstTime(Model.UpdateTime, false)
</small>
</div>
</div>
</div>

<style>
    #eoj-container { min-width: @(3*(Model.Problems.Count+2)+15)rem; max-width: @(3*(Model.Problems.Count+2)+25)rem; }

    @@media (min-width: 1200px) {
        #eoj-container { min-width: @(4*(Model.Problems.Count+2)+15)rem; max-width: @(4*(Model.Problems.Count+2)+25)rem; }
    }
</style>

<script>
    $('.score-cell').dblclick(function () {
        let $team_id = $(this).parent().data('team-id');
        let $prob_id = $('.prob-cell').eq($(this).index() - 3).text();
        let $url = '@Url.Action("Penalty")?teamid=' + $team_id + '&probid=' + $prob_id;
        showWindow('penalty-detail', $url);
        return false;
    });
</script>
