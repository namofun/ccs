@model IPagedList<Polygon.Models.Solution>
@{
    ViewData["Title"] = "Status";
    ViewData["SidebarBreakpoint"] = "xl";
    Layout = "_LayoutWithSidebar";
    var dateFormat = System.Globalization.CultureInfo.GetCultureInfo(1033);
    IReadOnlyDictionary<int, (int Accepted, int Total)> substat = ViewBag.SubmissionStatistics;
    var avp = substat?.Where(sc => sc.Value.Accepted > 0).Select(sc => sc.Key).ToHashSet() ?? new HashSet<int>();
    int? teamid = Contest.Team?.TeamId;
    var problems = await Contest.Context.ListProblemsAsync();
    var langs = await Contest.Context.ListLanguagesAsync();
    GymFilteringModel filters = ViewBag.Filters;
}

<h2 class="mt-4 mb-3">Submission Status</h2>

<table class="table table-gym text-center table-text-middle" style="width:100%">
    <thead>
        <tr role="row">
            <th scope="col">ID</th>
            <th scope="col" title="Submit Time">Time</th>
            <th scope="col" title="Author">Author</th>
            <th scope="col" title="Problem">Problem</th>
            <th scope="col" class="d-none d-lg-table-cell" title="Language">Lang</th>
            <th scope="col" class="non-lg-last-cell" title="Verdict">Verdict</th>
            <th scope="col" class="d-none d-lg-table-cell" title="Execution Time">E.Time</th>
            <th scope="col" class="d-none d-lg-table-cell" title="Execution Memory">E.Mem</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var stat in Model)
        {
            var prob = problems.Find(stat.ProblemId);
            if (prob == null) { continue; }
            var notIgnore = Contest.ShouldSubmissionAvailable(stat.TeamId == teamid, avp.Contains(stat.ProblemId));
            <tr role="row" asp-link-ignore="@(!notIgnore)" asp-action="Submission" asp-route-sid="@stat.SubmissionId" class="@(stat.Skipped ? "ignore" : "")" data-toggle="ajaxWindow" data-target="showSubmission">
                <td use-a="">@stat.SubmissionId</td>
                <td use-a title="@Html.CstTime(stat.Time)">@if (stat.Time < (Contest.StartTime + Contest.EndTime)) {@((stat.Time - Contest.StartTime.Value).ToDeltaString())} else {@Html.CstTime(stat.Time)}</td>
                <td>@stat.AuthorName</td>
                <td><a asp-action="ProblemView" asp-route-prob="@prob.ShortName">@(prob.ShortName)<span class="d-none d-sm-inline">. @prob.Title</span></a></td>
                <td class="d-none d-lg-table-cell text-variant" use-a>@stat.Language</td>
                <td use-a class="non-lg-last-cell"><verdict skipped="@stat.Skipped" value="@stat.Verdict" /></td>
                <td class="d-none d-lg-table-cell" use-a>@(stat.ExecutionTime.HasValue ? $"{stat.ExecutionTime.Value / 1000.0:F3}" : "N/A")</td>
                <td class="d-none d-lg-table-cell" use-a>@(stat.ExecutionMemory.HasValue ? $"{stat.ExecutionMemory / 1024.0:F1}" : "N/A")</td>
            </tr>
        }
        @if (Model.Count == 0)
        {
            <tr>
                <td colspan="8">No data available in table</td>
            </tr>
        }
    </tbody>
</table>

<pagination bs-current-page="@Model.CurrentPage" bs-total-page="@Model.TotalPage" asp-all-route-data="filters.ToRouteData()" class="mb-4" />

@section Sidebar {
    <h3 class="mt-4">Status filter</h3>
    <form method="get">
        <div class="form-group mb-2">
            <label for="filter-prob" class="mb-0">Problem</label>
            <select id="filter-prob" name="prob" class="form-control form-control-sm">
                <option value="">Any problem</option>
                @foreach (var p in problems)
                {
                <option value="@p.ShortName" issel="filters.Problem == p.ShortName">@p.ShortName - @p.Title</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="filter-verd" class="mb-0">Verdict</label>
            <select id="filter-verd" name="verd" class="form-control form-control-sm">
                <option value="">Any verdict</option>
                <option value="8" issel="filters.Verdict == Verdict.Pending">Pending</option>
                <option value="9" issel="filters.Verdict == Verdict.Running">Running</option>
                <option value="11" issel="filters.Verdict == Verdict.Accepted">Accepted</option>
                <option value="5" issel="filters.Verdict == Verdict.WrongAnswer">Wrong Answer</option>
                <option value="1" issel="filters.Verdict == Verdict.TimeLimitExceeded">Time Limit Exceeded</option>
                <option value="3" issel="filters.Verdict == Verdict.RuntimeError">Runtime Error</option>
                <option value="2" issel="filters.Verdict == Verdict.MemoryLimitExceeded">Memory Limit Exceeded</option>
                <option value="4" issel="filters.Verdict == Verdict.OutputLimitExceeded">Output Limit Exceeded</option>
                <option value="6" issel="filters.Verdict == Verdict.CompileError">Compile Error</option>
                <option value="0" issel="filters.Verdict == Verdict.Unknown">Unknown</option>
                <option value="10" issel="filters.Verdict == Verdict.UndefinedError">Undefined Error</option>
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="filter-lang" class="mb-0">Language</label>
            <select id="filter-lang" name="lang" class="form-control form-control-sm">
                <option value="">Any language</option>
                @foreach (var l in langs)
                {
                <option value="@l.Id" issel="filters.Language == l.Id">@l.Name</option>
                }
            </select>
        </div>
        <p class="mt-3">
            <button class="btn btn-secondary btn-sm" name="filter" value="1">filter</button>
            <button class="btn btn-secondary btn-sm" name="reset" value="1">reset</button>
        </p>
    </form>
}
